/* eslint-disable */
// NOTE(dmiller): ^I have to add this
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var google_api_annotations_pb = require('../../google/api/annotations_pb.js');
goog.exportSymbol('proto.webview.GetViewRequest', null, global);
goog.exportSymbol('proto.webview.Resource', null, global);
goog.exportSymbol('proto.webview.TiltBuild', null, global);
goog.exportSymbol('proto.webview.View', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.webview.Resource = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.webview.Resource, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.webview.Resource.displayName = 'proto.webview.Resource';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.webview.Resource.prototype.toObject = function(opt_includeInstance) {
  return proto.webview.Resource.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.webview.Resource} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.webview.Resource.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.webview.Resource}
 */
proto.webview.Resource.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.webview.Resource;
  return proto.webview.Resource.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.webview.Resource} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.webview.Resource}
 */
proto.webview.Resource.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.webview.Resource.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.webview.Resource.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.webview.Resource} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.webview.Resource.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.webview.TiltBuild = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.webview.TiltBuild, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.webview.TiltBuild.displayName = 'proto.webview.TiltBuild';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.webview.TiltBuild.prototype.toObject = function(opt_includeInstance) {
  return proto.webview.TiltBuild.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.webview.TiltBuild} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.webview.TiltBuild.toObject = function(includeInstance, msg) {
  var f, obj = {
    version: jspb.Message.getFieldWithDefault(msg, 1, ""),
    commitSha: jspb.Message.getFieldWithDefault(msg, 2, ""),
    date: jspb.Message.getFieldWithDefault(msg, 3, ""),
    dev: jspb.Message.getFieldWithDefault(msg, 4, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.webview.TiltBuild}
 */
proto.webview.TiltBuild.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.webview.TiltBuild;
  return proto.webview.TiltBuild.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.webview.TiltBuild} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.webview.TiltBuild}
 */
proto.webview.TiltBuild.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setVersion(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setCommitSha(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setDate(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setDev(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.webview.TiltBuild.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.webview.TiltBuild.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.webview.TiltBuild} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.webview.TiltBuild.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getVersion();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getCommitSha();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getDate();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getDev();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
};


/**
 * optional string version = 1;
 * @return {string}
 */
proto.webview.TiltBuild.prototype.getVersion = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.webview.TiltBuild.prototype.setVersion = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string commit_SHA = 2;
 * @return {string}
 */
proto.webview.TiltBuild.prototype.getCommitSha = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.webview.TiltBuild.prototype.setCommitSha = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string date = 3;
 * @return {string}
 */
proto.webview.TiltBuild.prototype.getDate = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.webview.TiltBuild.prototype.setDate = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional bool dev = 4;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.webview.TiltBuild.prototype.getDev = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 4, false));
};


/** @param {boolean} value */
proto.webview.TiltBuild.prototype.setDev = function(value) {
  jspb.Message.setProto3BooleanField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.webview.View = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.webview.View.repeatedFields_, null);
};
goog.inherits(proto.webview.View, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.webview.View.displayName = 'proto.webview.View';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.webview.View.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.webview.View.prototype.toObject = function(opt_includeInstance) {
  return proto.webview.View.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.webview.View} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.webview.View.toObject = function(includeInstance, msg) {
  var f, obj = {
    log: jspb.Message.getFieldWithDefault(msg, 1, ""),
    resourcesList: jspb.Message.toObjectList(msg.getResourcesList(),
    proto.webview.Resource.toObject, includeInstance),
    logTimestamps: jspb.Message.getFieldWithDefault(msg, 3, false),
    featureFlagsMap: (f = msg.getFeatureFlagsMap()) ? f.toObject(includeInstance, undefined) : [],
    needAnalyticsNudge: jspb.Message.getFieldWithDefault(msg, 5, false),
    runningTiltBuild: (f = msg.getRunningTiltBuild()) && proto.webview.TiltBuild.toObject(includeInstance, f),
    latestTiltBuild: (f = msg.getLatestTiltBuild()) && proto.webview.TiltBuild.toObject(includeInstance, f),
    tiltCloudUsername: jspb.Message.getFieldWithDefault(msg, 8, ""),
    tiltCloudSchemehost: jspb.Message.getFieldWithDefault(msg, 9, ""),
    tiltCloudTeamId: jspb.Message.getFieldWithDefault(msg, 10, ""),
    fatalError: jspb.Message.getFieldWithDefault(msg, 11, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.webview.View}
 */
proto.webview.View.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.webview.View;
  return proto.webview.View.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.webview.View} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.webview.View}
 */
proto.webview.View.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setLog(value);
      break;
    case 2:
      var value = new proto.webview.Resource;
      reader.readMessage(value,proto.webview.Resource.deserializeBinaryFromReader);
      msg.addResources(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setLogTimestamps(value);
      break;
    case 4:
      var value = msg.getFeatureFlagsMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readBool, null, "");
         });
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setNeedAnalyticsNudge(value);
      break;
    case 6:
      var value = new proto.webview.TiltBuild;
      reader.readMessage(value,proto.webview.TiltBuild.deserializeBinaryFromReader);
      msg.setRunningTiltBuild(value);
      break;
    case 7:
      var value = new proto.webview.TiltBuild;
      reader.readMessage(value,proto.webview.TiltBuild.deserializeBinaryFromReader);
      msg.setLatestTiltBuild(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setTiltCloudUsername(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setTiltCloudSchemehost(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setTiltCloudTeamId(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setFatalError(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.webview.View.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.webview.View.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.webview.View} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.webview.View.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLog();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getResourcesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.webview.Resource.serializeBinaryToWriter
    );
  }
  f = message.getLogTimestamps();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
  f = message.getFeatureFlagsMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(4, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeBool);
  }
  f = message.getNeedAnalyticsNudge();
  if (f) {
    writer.writeBool(
      5,
      f
    );
  }
  f = message.getRunningTiltBuild();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.webview.TiltBuild.serializeBinaryToWriter
    );
  }
  f = message.getLatestTiltBuild();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.webview.TiltBuild.serializeBinaryToWriter
    );
  }
  f = message.getTiltCloudUsername();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getTiltCloudSchemehost();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
  f = message.getTiltCloudTeamId();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
  f = message.getFatalError();
  if (f.length > 0) {
    writer.writeString(
      11,
      f
    );
  }
};


/**
 * optional string log = 1;
 * @return {string}
 */
proto.webview.View.prototype.getLog = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.webview.View.prototype.setLog = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * repeated Resource resources = 2;
 * @return {!Array<!proto.webview.Resource>}
 */
proto.webview.View.prototype.getResourcesList = function() {
  return /** @type{!Array<!proto.webview.Resource>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.webview.Resource, 2));
};


/** @param {!Array<!proto.webview.Resource>} value */
proto.webview.View.prototype.setResourcesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.webview.Resource=} opt_value
 * @param {number=} opt_index
 * @return {!proto.webview.Resource}
 */
proto.webview.View.prototype.addResources = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.webview.Resource, opt_index);
};


proto.webview.View.prototype.clearResourcesList = function() {
  this.setResourcesList([]);
};


/**
 * optional bool log_timestamps = 3;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.webview.View.prototype.getLogTimestamps = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 3, false));
};


/** @param {boolean} value */
proto.webview.View.prototype.setLogTimestamps = function(value) {
  jspb.Message.setProto3BooleanField(this, 3, value);
};


/**
 * map<string, bool> feature_flags = 4;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,boolean>}
 */
proto.webview.View.prototype.getFeatureFlagsMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,boolean>} */ (
      jspb.Message.getMapField(this, 4, opt_noLazyCreate,
      null));
};


proto.webview.View.prototype.clearFeatureFlagsMap = function() {
  this.getFeatureFlagsMap().clear();
};


/**
 * optional bool need_analytics_nudge = 5;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.webview.View.prototype.getNeedAnalyticsNudge = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 5, false));
};


/** @param {boolean} value */
proto.webview.View.prototype.setNeedAnalyticsNudge = function(value) {
  jspb.Message.setProto3BooleanField(this, 5, value);
};


/**
 * optional TiltBuild running_tilt_build = 6;
 * @return {?proto.webview.TiltBuild}
 */
proto.webview.View.prototype.getRunningTiltBuild = function() {
  return /** @type{?proto.webview.TiltBuild} */ (
    jspb.Message.getWrapperField(this, proto.webview.TiltBuild, 6));
};


/** @param {?proto.webview.TiltBuild|undefined} value */
proto.webview.View.prototype.setRunningTiltBuild = function(value) {
  jspb.Message.setWrapperField(this, 6, value);
};


proto.webview.View.prototype.clearRunningTiltBuild = function() {
  this.setRunningTiltBuild(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.webview.View.prototype.hasRunningTiltBuild = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional TiltBuild latest_tilt_build = 7;
 * @return {?proto.webview.TiltBuild}
 */
proto.webview.View.prototype.getLatestTiltBuild = function() {
  return /** @type{?proto.webview.TiltBuild} */ (
    jspb.Message.getWrapperField(this, proto.webview.TiltBuild, 7));
};


/** @param {?proto.webview.TiltBuild|undefined} value */
proto.webview.View.prototype.setLatestTiltBuild = function(value) {
  jspb.Message.setWrapperField(this, 7, value);
};


proto.webview.View.prototype.clearLatestTiltBuild = function() {
  this.setLatestTiltBuild(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.webview.View.prototype.hasLatestTiltBuild = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional string tilt_cloud_username = 8;
 * @return {string}
 */
proto.webview.View.prototype.getTiltCloudUsername = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/** @param {string} value */
proto.webview.View.prototype.setTiltCloudUsername = function(value) {
  jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional string tilt_cloud_schemeHost = 9;
 * @return {string}
 */
proto.webview.View.prototype.getTiltCloudSchemehost = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/** @param {string} value */
proto.webview.View.prototype.setTiltCloudSchemehost = function(value) {
  jspb.Message.setProto3StringField(this, 9, value);
};


/**
 * optional string tilt_cloud_team_ID = 10;
 * @return {string}
 */
proto.webview.View.prototype.getTiltCloudTeamId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/** @param {string} value */
proto.webview.View.prototype.setTiltCloudTeamId = function(value) {
  jspb.Message.setProto3StringField(this, 10, value);
};


/**
 * optional string fatal_error = 11;
 * @return {string}
 */
proto.webview.View.prototype.getFatalError = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/** @param {string} value */
proto.webview.View.prototype.setFatalError = function(value) {
  jspb.Message.setProto3StringField(this, 11, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.webview.GetViewRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.webview.GetViewRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.webview.GetViewRequest.displayName = 'proto.webview.GetViewRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.webview.GetViewRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.webview.GetViewRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.webview.GetViewRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.webview.GetViewRequest.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.webview.GetViewRequest}
 */
proto.webview.GetViewRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.webview.GetViewRequest;
  return proto.webview.GetViewRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.webview.GetViewRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.webview.GetViewRequest}
 */
proto.webview.GetViewRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.webview.GetViewRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.webview.GetViewRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.webview.GetViewRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.webview.GetViewRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};


goog.object.extend(exports, proto.webview);
