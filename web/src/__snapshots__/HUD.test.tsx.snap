// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`alerts page for nonexistent resource shows error 1`] = `
<MemoryRouter
  initialEntries={
    Array [
      "/r/nonexistentresource/alerts",
    ]
  }
>
  <Router
    history={
      Object {
        "action": "POP",
        "block": [Function],
        "canGo": [Function],
        "createHref": [Function],
        "entries": Array [
          Object {
            "hash": "",
            "key": "bnjysu",
            "pathname": "/r/nonexistentresource/alerts",
            "search": "",
            "state": undefined,
          },
        ],
        "go": [Function],
        "goBack": [Function],
        "goForward": [Function],
        "index": 0,
        "length": 1,
        "listen": [Function],
        "location": Object {
          "hash": "",
          "key": "bnjysu",
          "pathname": "/r/nonexistentresource/alerts",
          "search": "",
          "state": undefined,
        },
        "push": [Function],
        "replace": [Function],
      }
    }
  >
    <HUD
      history={
        Object {
          "action": "POP",
          "block": [Function],
          "canGo": [Function],
          "createHref": [Function],
          "entries": Array [
            Object {
              "hash": "",
              "key": "fghx4t",
              "pathname": "/",
              "search": "",
              "state": undefined,
            },
          ],
          "go": [Function],
          "goBack": [Function],
          "goForward": [Function],
          "index": 0,
          "length": 1,
          "listen": [Function],
          "location": Object {
            "hash": "",
            "key": "fghx4t",
            "pathname": "/",
            "search": "",
            "state": undefined,
          },
          "push": [Function],
          "replace": [Function],
        }
      }
    >
      <div
        className="HUD"
      >
        <AnalyticsNudge>
          <section
            className="AnalyticsNudge"
          >
            <p>
              Welcome to Tilt! May we collect usage data to help us improve? (
              <a
                href="https://github.com/windmilleng/tilt#telemetry-and-privacy"
                target="_blank"
              >
                Read more
              </a>
              )
            </p>
            <span>
              <button
                className="AnalyticsNudge-button"
                onClick={[Function]}
              >
                Nope
              </button>
              <button
                className="AnalyticsNudge-button opt-in"
                onClick={[Function]}
              >
                I'm in
              </button>
            </span>
          </section>
        </AnalyticsNudge>
        <Switch>
          <Route
            computedMatch={
              Object {
                "isExact": true,
                "params": Object {
                  "name": "nonexistentresource",
                },
                "path": "/r/:name/alerts",
                "url": "/r/nonexistentresource/alerts",
              }
            }
            location={
              Object {
                "hash": "",
                "key": "bnjysu",
                "pathname": "/r/nonexistentresource/alerts",
                "search": "",
                "state": undefined,
              }
            }
            path="/r/:name/alerts"
            render={[Function]}
          >
            <TopBar
              alertsUrl="/alerts"
              logUrl="/"
              numberOfAlerts={0}
              previewUrl="/preview"
              resourceView={2}
              sailEnabled={false}
              sailUrl=""
            >
              <div
                className="TopBar"
              >
                <TabNav
                  alertsUrl="/alerts"
                  logUrl="/"
                  numberOfAlerts={0}
                  previewUrl="/preview"
                  resourceView={2}
                >
                  <nav
                    className="TabNav"
                  >
                    <ul>
                      <li>
                        <Link
                          className="tabLink "
                          replace={false}
                          to="/"
                        >
                          <a
                            className="tabLink "
                            href="/"
                            onClick={[Function]}
                          >
                            Logs
                          </a>
                        </Link>
                      </li>
                      <li>
                        <Link
                          className="tabLink "
                          replace={false}
                          to="/preview"
                        >
                          <a
                            className="tabLink "
                            href="/preview"
                            onClick={[Function]}
                          >
                            Preview
                          </a>
                        </Link>
                      </li>
                      <li>
                        <Link
                          className="tabLink tabLink--errors tabLink--is-selected"
                          replace={false}
                          to="/alerts"
                        >
                          <a
                            className="tabLink tabLink--errors tabLink--is-selected"
                            href="/alerts"
                            onClick={[Function]}
                          >
                            Alerts
                          </a>
                        </Link>
                      </li>
                    </ul>
                  </nav>
                </TabNav>
                <span
                  className="TopBar-spacer"
                >
                   
                </span>
                <SailInfo
                  sailEnabled={false}
                  sailUrl=""
                >
                  <span
                    className="sail-url"
                  >
                     
                  </span>
                </SailInfo>
              </div>
            </TopBar>
          </Route>
        </Switch>
        <Switch>
          <Route
            computedMatch={
              Object {
                "isExact": true,
                "params": Object {
                  "name": "nonexistentresource",
                },
                "path": "/r/:name/alerts",
                "url": "/r/nonexistentresource/alerts",
              }
            }
            location={
              Object {
                "hash": "",
                "key": "bnjysu",
                "pathname": "/r/nonexistentresource/alerts",
                "search": "",
                "state": undefined,
              }
            }
            path="/r/:name/alerts"
            render={[Function]}
          >
            <Sidebar
              isClosed={false}
              items={
                Array [
                  SidebarItem {
                    "alertResource": AlertResource {
                      "buildHistory": Array [
                        Object {
                          "Edits": Array [
                            "main.go",
                            "cli.go",
                          ],
                          "Error": "the build failed!",
                          "FinishTime": "2016-12-21T23:36:07.071Z",
                          "StartTime": "2016-12-21T23:36:07.071Z",
                        },
                      ],
                      "crashLog": "",
                      "name": "vigoda",
                      "resourceInfo": Object {
                        "podCreationTime": "2016-12-21T23:36:07.071Z",
                        "podRestarts": 0,
                        "podStatus": "Running",
                      },
                    },
                    "currentBuildStartTime": "2016-12-21T23:36:07.071Z",
                    "hasEndpoints": 0,
                    "hasPendingChanges": false,
                    "hasWarnings": false,
                    "lastBuild": Object {
                      "Edits": Array [
                        "main.go",
                        "cli.go",
                      ],
                      "Error": "the build failed!",
                      "FinishTime": "2016-12-21T23:36:07.071Z",
                      "StartTime": "2016-12-21T23:36:07.071Z",
                    },
                    "lastDeployTime": "2016-12-21T23:36:07.071Z",
                    "name": "vigoda",
                    "pendingBuildSince": "2016-12-21T23:36:07.071Z",
                    "status": "pending",
                    "triggerMode": 0,
                  },
                ]
              }
              pathBuilder={
                PathBuilder {
                  "host": "localhost",
                  "roomId": "",
                }
              }
              resourceView={2}
              selected="nonexistentresource"
              toggleSidebar={[Function]}
            >
              <section
                className="Sidebar"
              >
                <nav
                  className="Sidebar-resources"
                >
                  <ul
                    className="Sidebar-list"
                  >
                    <li>
                      <Link
                        className="resLink resLink--all"
                        replace={false}
                        to="/alerts"
                      >
                        <a
                          className="resLink resLink--all"
                          href="/alerts"
                          onClick={[Function]}
                        >
                          <span
                            className="resLink--all-name"
                          >
                            All
                          </span>
                          <span
                            className="resLink-alertBadge"
                          >
                            1
                          </span>
                          <span
                            className="resLink-timeAgo empty"
                          >
                            —
                          </span>
                          <span
                            className="resLink-isDirty"
                          />
                        </a>
                      </Link>
                    </li>
                    <li
                      key="vigoda"
                    >
                      <SidebarTriggerButton
                        isReady={false}
                        isSelected={false}
                        resourceName="vigoda"
                        triggerMode={0}
                      />
                      <Link
                        className="resLink resLink--building"
                        replace={false}
                        to="/r/vigoda/alerts"
                      >
                        <a
                          className="resLink resLink--building"
                          href="/r/vigoda/alerts"
                          onClick={[Function]}
                        >
                          <div
                            className="sidebarIcon"
                          >
                            <SidebarIcon
                              hasWarning={false}
                              isBuilding={true}
                              isDirty={false}
                              lastBuild={
                                Object {
                                  "Edits": Array [
                                    "main.go",
                                    "cli.go",
                                  ],
                                  "Error": "the build failed!",
                                  "FinishTime": "2016-12-21T23:36:07.071Z",
                                  "StartTime": "2016-12-21T23:36:07.071Z",
                                }
                              }
                              status="pending"
                              triggerMode={0}
                            >
                              <ForwardRef
                                className="dotAutoBuilding auto"
                                style={
                                  Object {
                                    "animation": "spin 1s linear infinite",
                                  }
                                }
                              >
                                <svg
                                  className="dotAutoBuilding auto"
                                  style={
                                    Object {
                                      "animation": "spin 1s linear infinite",
                                    }
                                  }
                                >
                                  indicator-auto-building.svg
                                </svg>
                              </ForwardRef>
                            </SidebarIcon>
                          </div>
                          <p
                            className="resLink-name"
                            title="vigoda"
                          >
                            vigoda
                          </p>
                          <span
                            className="resLink-alertBadge"
                          >
                            1
                          </span>
                          <span
                            className="resLink-timeAgo "
                          >
                            <TimeAgo
                              component="time"
                              date="2016-12-21T23:36:07.071Z"
                              formatter={[Function]}
                              live={true}
                              maxPeriod={Infinity}
                              minPeriod={0}
                              now={[Function]}
                            >
                              <time
                                dateTime="2016-12-21T23:36:07.071Z"
                                title="2016-12-21T23:36:07.071Z"
                              >
                                &lt;5s
                              </time>
                            </TimeAgo>
                          </span>
                          <span
                            className="resLink-isDirty"
                          />
                        </a>
                      </Link>
                    </li>
                  </ul>
                </nav>
                <div
                  className="Sidebar-spacer"
                >
                   
                </div>
                <button
                  className="Sidebar-toggle"
                  onClick={[Function]}
                >
                  <ForwardRef>
                    <svg>
                      chevron.svg
                    </svg>
                  </ForwardRef>
                   Collapse
                </button>
              </section>
            </Sidebar>
          </Route>
        </Switch>
        <Statusbar
          alertsUrl="/alerts"
          items={
            Array [
              StatusItem {
                "buildHistory": Array [
                  Object {
                    "Edits": Array [
                      "main.go",
                      "cli.go",
                    ],
                    "Error": "the build failed!",
                    "FinishTime": "2016-12-21T23:36:07.071Z",
                    "StartTime": "2016-12-21T23:36:07.071Z",
                  },
                ],
                "currentBuild": Object {
                  "Edits": Array [
                    "main.go",
                  ],
                  "StartTime": "2016-12-21T23:36:07.071Z",
                },
                "hasError": false,
                "lastBuild": Object {
                  "Edits": Array [
                    "main.go",
                    "cli.go",
                  ],
                  "Error": "the build failed!",
                  "FinishTime": "2016-12-21T23:36:07.071Z",
                  "StartTime": "2016-12-21T23:36:07.071Z",
                },
                "name": "vigoda",
                "pendingBuildEdits": Array [
                  "main.go",
                  "cli.go",
                  "vigoda.go",
                ],
                "pendingBuildSince": "2016-12-21T23:36:07.071Z",
                "podStatus": "Running",
                "up": false,
                "warningCount": 0,
              },
            ]
          }
        >
          <div
            className="Statusbar"
          >
            <section
              className="Statusbar-panel Statusbar-errWarnPanel"
            >
              <div
                className="Statusbar-errWarnPanel-child"
              >
                <ForwardRef
                  className="Statusbar-errWarnPanel-icon "
                >
                  <svg
                    className="Statusbar-errWarnPanel-icon "
                  >
                    error.svg
                  </svg>
                </ForwardRef>
                <p>
                  <span
                    className="Statusbar-errWarnPanel-count Statusbar-errWarnPanel-count--error"
                  >
                    0
                  </span>
                   
                  <Link
                    replace={false}
                    to="/alerts"
                  >
                    <a
                      href="/alerts"
                      onClick={[Function]}
                    >
                      error
                      s
                    </a>
                  </Link>
                </p>
              </div>
              <div
                className="Statusbar-errWarnPanel-child"
              >
                <ForwardRef
                  className="Statusbar-errWarnPanel-icon "
                >
                  <svg
                    className="Statusbar-errWarnPanel-icon "
                  >
                    warning.svg
                  </svg>
                </ForwardRef>
                <p>
                  <span
                    className="Statusbar-errWarnPanel-count"
                  >
                    0
                  </span>
                   
                  warning
                  s
                </p>
              </div>
            </section>
            <section
              className="Statusbar-panel Statusbar-statusMsgPanel"
            >
              <p
                className="Statusbar-statusMsgPanel-child"
              >
                Updating vigoda…
              </p>
              <p
                className="Statusbar-statusMsgPanel-child Statusbar-statusMsgPanel-child--lastEdit"
              >
                <span
                  className="Statusbar-statusMsgPanel-label"
                >
                  Last Edit:
                </span>
                <span>
                  vigoda ‣ main.go[+2 more]
                </span>
              </p>
            </section>
            <section
              className="Statusbar-panel Statusbar-progressPanel"
            >
              <p>
                <strong>
                  0
                </strong>
                /
                1
                 running
              </p>
            </section>
            <section
              className="Statusbar-tiltPanel"
            >
              <ForwardRef
                className="Statusbar-logo"
              >
                <svg
                  className="Statusbar-logo"
                >
                  logo.svg
                </svg>
              </ForwardRef>
            </section>
          </div>
        </Statusbar>
        <Switch>
          <Route
            computedMatch={
              Object {
                "isExact": true,
                "params": Object {
                  "name": "nonexistentresource",
                },
                "path": "/r/:name/alerts",
                "url": "/r/nonexistentresource/alerts",
              }
            }
            exact={true}
            location={
              Object {
                "hash": "",
                "key": "bnjysu",
                "pathname": "/r/nonexistentresource/alerts",
                "search": "",
                "state": undefined,
              }
            }
            path="/r/:name/alerts"
            render={[Function]}
          >
            <Route
              component={[Function]}
            >
              <NotFound
                history={
                  Object {
                    "action": "POP",
                    "block": [Function],
                    "canGo": [Function],
                    "createHref": [Function],
                    "entries": Array [
                      Object {
                        "hash": "",
                        "key": "bnjysu",
                        "pathname": "/r/nonexistentresource/alerts",
                        "search": "",
                        "state": undefined,
                      },
                    ],
                    "go": [Function],
                    "goBack": [Function],
                    "goForward": [Function],
                    "index": 0,
                    "length": 1,
                    "listen": [Function],
                    "location": Object {
                      "hash": "",
                      "key": "bnjysu",
                      "pathname": "/r/nonexistentresource/alerts",
                      "search": "",
                      "state": undefined,
                    },
                    "push": [Function],
                    "replace": [Function],
                  }
                }
                location={
                  Object {
                    "hash": "",
                    "key": "bnjysu",
                    "pathname": "/r/nonexistentresource/alerts",
                    "search": "",
                    "state": undefined,
                  }
                }
                match={
                  Object {
                    "isExact": true,
                    "params": Object {
                      "name": "nonexistentresource",
                    },
                    "path": "/r/:name/alerts",
                    "url": "/r/nonexistentresource/alerts",
                  }
                }
              >
                <LoadingScreen
                  message={
                    <div>
                      No resource found at 
                      <code>
                        /r/nonexistentresource/alerts
                      </code>
                    </div>
                  }
                >
                  <section
                    className="LoadingScreen"
                  >
                    <div>
                      No resource found at 
                      <code>
                        /r/nonexistentresource/alerts
                      </code>
                    </div>
                  </section>
                </LoadingScreen>
              </NotFound>
            </Route>
          </Route>
        </Switch>
      </div>
    </HUD>
  </Router>
</MemoryRouter>
`;

exports[`log page for nonexistent resource shows error 1`] = `
<MemoryRouter
  initialEntries={
    Array [
      "r/nonexistingresource",
    ]
  }
>
  <Router
    history={
      Object {
        "action": "POP",
        "block": [Function],
        "canGo": [Function],
        "createHref": [Function],
        "entries": Array [
          Object {
            "hash": "",
            "key": "27ouot",
            "pathname": "r/nonexistingresource",
            "search": "",
            "state": undefined,
          },
        ],
        "go": [Function],
        "goBack": [Function],
        "goForward": [Function],
        "index": 0,
        "length": 1,
        "listen": [Function],
        "location": Object {
          "hash": "",
          "key": "27ouot",
          "pathname": "r/nonexistingresource",
          "search": "",
          "state": undefined,
        },
        "push": [Function],
        "replace": [Function],
      }
    }
  >
    <HUD
      history={
        Object {
          "action": "POP",
          "block": [Function],
          "canGo": [Function],
          "createHref": [Function],
          "entries": Array [
            Object {
              "hash": "",
              "key": "fghx4t",
              "pathname": "/",
              "search": "",
              "state": undefined,
            },
          ],
          "go": [Function],
          "goBack": [Function],
          "goForward": [Function],
          "index": 0,
          "length": 1,
          "listen": [Function],
          "location": Object {
            "hash": "",
            "key": "fghx4t",
            "pathname": "/",
            "search": "",
            "state": undefined,
          },
          "push": [Function],
          "replace": [Function],
        }
      }
    >
      <div
        className="HUD"
      >
        <AnalyticsNudge>
          <section
            className="AnalyticsNudge"
          >
            <p>
              Welcome to Tilt! May we collect usage data to help us improve? (
              <a
                href="https://github.com/windmilleng/tilt#telemetry-and-privacy"
                target="_blank"
              >
                Read more
              </a>
              )
            </p>
            <span>
              <button
                className="AnalyticsNudge-button"
                onClick={[Function]}
              >
                Nope
              </button>
              <button
                className="AnalyticsNudge-button opt-in"
                onClick={[Function]}
              >
                I'm in
              </button>
            </span>
          </section>
        </AnalyticsNudge>
        <Switch>
          <Route
            computedMatch={
              Object {
                "isExact": false,
                "params": Object {},
                "path": "/",
                "url": "/",
              }
            }
            location={
              Object {
                "hash": "",
                "key": "27ouot",
                "pathname": "r/nonexistingresource",
                "search": "",
                "state": undefined,
              }
            }
            render={[Function]}
          >
            <TopBar
              alertsUrl="/alerts"
              logUrl="/"
              numberOfAlerts={1}
              previewUrl="/preview"
              resourceView={0}
              sailEnabled={false}
              sailUrl=""
            >
              <div
                className="TopBar"
              >
                <TabNav
                  alertsUrl="/alerts"
                  logUrl="/"
                  numberOfAlerts={1}
                  previewUrl="/preview"
                  resourceView={0}
                >
                  <nav
                    className="TabNav"
                  >
                    <ul>
                      <li>
                        <Link
                          className="tabLink tabLink--is-selected"
                          replace={false}
                          to="/"
                        >
                          <a
                            className="tabLink tabLink--is-selected"
                            href="/"
                            onClick={[Function]}
                          >
                            Logs
                          </a>
                        </Link>
                      </li>
                      <li>
                        <Link
                          className="tabLink "
                          replace={false}
                          to="/preview"
                        >
                          <a
                            className="tabLink "
                            href="/preview"
                            onClick={[Function]}
                          >
                            Preview
                          </a>
                        </Link>
                      </li>
                      <li>
                        <Link
                          className="tabLink tabLink--errors "
                          replace={false}
                          to="/alerts"
                        >
                          <a
                            className="tabLink tabLink--errors "
                            href="/alerts"
                            onClick={[Function]}
                          >
                            Alerts
                            <span
                              className="tabLink-alertBadge"
                            >
                              1
                            </span>
                          </a>
                        </Link>
                      </li>
                    </ul>
                  </nav>
                </TabNav>
                <span
                  className="TopBar-spacer"
                >
                   
                </span>
                <SailInfo
                  sailEnabled={false}
                  sailUrl=""
                >
                  <span
                    className="sail-url"
                  >
                     
                  </span>
                </SailInfo>
              </div>
            </TopBar>
          </Route>
        </Switch>
        <Switch>
          <Route
            computedMatch={
              Object {
                "isExact": false,
                "params": Object {},
                "path": "/",
                "url": "/",
              }
            }
            location={
              Object {
                "hash": "",
                "key": "27ouot",
                "pathname": "r/nonexistingresource",
                "search": "",
                "state": undefined,
              }
            }
            render={[Function]}
          >
            <Sidebar
              isClosed={false}
              items={
                Array [
                  SidebarItem {
                    "alertResource": AlertResource {
                      "buildHistory": Array [
                        Object {
                          "Edits": Array [
                            "main.go",
                            "cli.go",
                          ],
                          "Error": "the build failed!",
                          "FinishTime": "2016-12-21T23:36:07.071Z",
                          "StartTime": "2016-12-21T23:36:07.071Z",
                        },
                      ],
                      "crashLog": "",
                      "name": "vigoda",
                      "resourceInfo": Object {
                        "podCreationTime": "2016-12-21T23:36:07.071Z",
                        "podRestarts": 0,
                        "podStatus": "Running",
                      },
                    },
                    "currentBuildStartTime": "2016-12-21T23:36:07.071Z",
                    "hasEndpoints": 0,
                    "hasPendingChanges": false,
                    "hasWarnings": false,
                    "lastBuild": Object {
                      "Edits": Array [
                        "main.go",
                        "cli.go",
                      ],
                      "Error": "the build failed!",
                      "FinishTime": "2016-12-21T23:36:07.071Z",
                      "StartTime": "2016-12-21T23:36:07.071Z",
                    },
                    "lastDeployTime": "2016-12-21T23:36:07.071Z",
                    "name": "vigoda",
                    "pendingBuildSince": "2016-12-21T23:36:07.071Z",
                    "status": "pending",
                    "triggerMode": 0,
                  },
                ]
              }
              pathBuilder={
                PathBuilder {
                  "host": "localhost",
                  "roomId": "",
                }
              }
              resourceView={0}
              toggleSidebar={[Function]}
            >
              <section
                className="Sidebar"
              >
                <nav
                  className="Sidebar-resources"
                >
                  <ul
                    className="Sidebar-list"
                  >
                    <li>
                      <Link
                        className="resLink resLink--all is-selected"
                        replace={false}
                        to="/"
                      >
                        <a
                          className="resLink resLink--all is-selected"
                          href="/"
                          onClick={[Function]}
                        >
                          <span
                            className="resLink--all-name"
                          >
                            All
                          </span>
                          <span
                            className="resLink-alertBadge"
                          >
                            1
                          </span>
                          <span
                            className="resLink-timeAgo empty"
                          >
                            —
                          </span>
                          <span
                            className="resLink-isDirty"
                          />
                        </a>
                      </Link>
                    </li>
                    <li
                      key="vigoda"
                    >
                      <SidebarTriggerButton
                        isReady={false}
                        isSelected={false}
                        resourceName="vigoda"
                        triggerMode={0}
                      />
                      <Link
                        className="resLink resLink--building"
                        replace={false}
                        to="/r/vigoda"
                      >
                        <a
                          className="resLink resLink--building"
                          href="/r/vigoda"
                          onClick={[Function]}
                        >
                          <div
                            className="sidebarIcon"
                          >
                            <SidebarIcon
                              hasWarning={false}
                              isBuilding={true}
                              isDirty={false}
                              lastBuild={
                                Object {
                                  "Edits": Array [
                                    "main.go",
                                    "cli.go",
                                  ],
                                  "Error": "the build failed!",
                                  "FinishTime": "2016-12-21T23:36:07.071Z",
                                  "StartTime": "2016-12-21T23:36:07.071Z",
                                }
                              }
                              status="pending"
                              triggerMode={0}
                            >
                              <ForwardRef
                                className="dotAutoBuilding auto"
                                style={
                                  Object {
                                    "animation": "spin 1s linear infinite",
                                  }
                                }
                              >
                                <svg
                                  className="dotAutoBuilding auto"
                                  style={
                                    Object {
                                      "animation": "spin 1s linear infinite",
                                    }
                                  }
                                >
                                  indicator-auto-building.svg
                                </svg>
                              </ForwardRef>
                            </SidebarIcon>
                          </div>
                          <p
                            className="resLink-name"
                            title="vigoda"
                          >
                            vigoda
                          </p>
                          <span
                            className="resLink-alertBadge"
                          >
                            1
                          </span>
                          <span
                            className="resLink-timeAgo "
                          >
                            <TimeAgo
                              component="time"
                              date="2016-12-21T23:36:07.071Z"
                              formatter={[Function]}
                              live={true}
                              maxPeriod={Infinity}
                              minPeriod={0}
                              now={[Function]}
                            >
                              <time
                                dateTime="2016-12-21T23:36:07.071Z"
                                title="2016-12-21T23:36:07.071Z"
                              >
                                &lt;5s
                              </time>
                            </TimeAgo>
                          </span>
                          <span
                            className="resLink-isDirty"
                          />
                        </a>
                      </Link>
                    </li>
                  </ul>
                </nav>
                <div
                  className="Sidebar-spacer"
                >
                   
                </div>
                <button
                  className="Sidebar-toggle"
                  onClick={[Function]}
                >
                  <ForwardRef>
                    <svg>
                      chevron.svg
                    </svg>
                  </ForwardRef>
                   Collapse
                </button>
              </section>
            </Sidebar>
          </Route>
        </Switch>
        <Statusbar
          alertsUrl="/alerts"
          items={
            Array [
              StatusItem {
                "buildHistory": Array [
                  Object {
                    "Edits": Array [
                      "main.go",
                      "cli.go",
                    ],
                    "Error": "the build failed!",
                    "FinishTime": "2016-12-21T23:36:07.071Z",
                    "StartTime": "2016-12-21T23:36:07.071Z",
                  },
                ],
                "currentBuild": Object {
                  "Edits": Array [
                    "main.go",
                  ],
                  "StartTime": "2016-12-21T23:36:07.071Z",
                },
                "hasError": false,
                "lastBuild": Object {
                  "Edits": Array [
                    "main.go",
                    "cli.go",
                  ],
                  "Error": "the build failed!",
                  "FinishTime": "2016-12-21T23:36:07.071Z",
                  "StartTime": "2016-12-21T23:36:07.071Z",
                },
                "name": "vigoda",
                "pendingBuildEdits": Array [
                  "main.go",
                  "cli.go",
                  "vigoda.go",
                ],
                "pendingBuildSince": "2016-12-21T23:36:07.071Z",
                "podStatus": "Running",
                "up": false,
                "warningCount": 0,
              },
            ]
          }
        >
          <div
            className="Statusbar"
          >
            <section
              className="Statusbar-panel Statusbar-errWarnPanel"
            >
              <div
                className="Statusbar-errWarnPanel-child"
              >
                <ForwardRef
                  className="Statusbar-errWarnPanel-icon "
                >
                  <svg
                    className="Statusbar-errWarnPanel-icon "
                  >
                    error.svg
                  </svg>
                </ForwardRef>
                <p>
                  <span
                    className="Statusbar-errWarnPanel-count Statusbar-errWarnPanel-count--error"
                  >
                    0
                  </span>
                   
                  <Link
                    replace={false}
                    to="/alerts"
                  >
                    <a
                      href="/alerts"
                      onClick={[Function]}
                    >
                      error
                      s
                    </a>
                  </Link>
                </p>
              </div>
              <div
                className="Statusbar-errWarnPanel-child"
              >
                <ForwardRef
                  className="Statusbar-errWarnPanel-icon "
                >
                  <svg
                    className="Statusbar-errWarnPanel-icon "
                  >
                    warning.svg
                  </svg>
                </ForwardRef>
                <p>
                  <span
                    className="Statusbar-errWarnPanel-count"
                  >
                    0
                  </span>
                   
                  warning
                  s
                </p>
              </div>
            </section>
            <section
              className="Statusbar-panel Statusbar-statusMsgPanel"
            >
              <p
                className="Statusbar-statusMsgPanel-child"
              >
                Updating vigoda…
              </p>
              <p
                className="Statusbar-statusMsgPanel-child Statusbar-statusMsgPanel-child--lastEdit"
              >
                <span
                  className="Statusbar-statusMsgPanel-label"
                >
                  Last Edit:
                </span>
                <span>
                  vigoda ‣ main.go[+2 more]
                </span>
              </p>
            </section>
            <section
              className="Statusbar-panel Statusbar-progressPanel"
            >
              <p>
                <strong>
                  0
                </strong>
                /
                1
                 running
              </p>
            </section>
            <section
              className="Statusbar-tiltPanel"
            >
              <ForwardRef
                className="Statusbar-logo"
              >
                <svg
                  className="Statusbar-logo"
                >
                  logo.svg
                </svg>
              </ForwardRef>
            </section>
          </div>
        </Statusbar>
        <Switch>
          <Route
            component={[Function]}
            computedMatch={
              Object {
                "isExact": false,
                "params": Object {},
                "path": "/",
                "url": "/",
              }
            }
            location={
              Object {
                "hash": "",
                "key": "27ouot",
                "pathname": "r/nonexistingresource",
                "search": "",
                "state": undefined,
              }
            }
          >
            <NoMatch
              history={
                Object {
                  "action": "POP",
                  "block": [Function],
                  "canGo": [Function],
                  "createHref": [Function],
                  "entries": Array [
                    Object {
                      "hash": "",
                      "key": "27ouot",
                      "pathname": "r/nonexistingresource",
                      "search": "",
                      "state": undefined,
                    },
                  ],
                  "go": [Function],
                  "goBack": [Function],
                  "goForward": [Function],
                  "index": 0,
                  "length": 1,
                  "listen": [Function],
                  "location": Object {
                    "hash": "",
                    "key": "27ouot",
                    "pathname": "r/nonexistingresource",
                    "search": "",
                    "state": undefined,
                  },
                  "push": [Function],
                  "replace": [Function],
                }
              }
              location={
                Object {
                  "hash": "",
                  "key": "27ouot",
                  "pathname": "r/nonexistingresource",
                  "search": "",
                  "state": undefined,
                }
              }
              match={
                Object {
                  "isExact": false,
                  "params": Object {},
                  "path": "/",
                  "url": "/",
                }
              }
            >
              <LoadingScreen
                message={
                  <div>
                    No match for 
                    <code>
                      r/nonexistingresource
                    </code>
                  </div>
                }
              >
                <section
                  className="LoadingScreen"
                >
                  <div>
                    No match for 
                    <code>
                      r/nonexistingresource
                    </code>
                  </div>
                </section>
              </LoadingScreen>
            </NoMatch>
          </Route>
        </Switch>
      </div>
    </HUD>
  </Router>
</MemoryRouter>
`;

exports[`preview page for nonexistent resource shows error 1`] = `
<MemoryRouter
  initialEntries={
    Array [
      "/r/nonexistentresource/preview",
    ]
  }
>
  <Router
    history={
      Object {
        "action": "POP",
        "block": [Function],
        "canGo": [Function],
        "createHref": [Function],
        "entries": Array [
          Object {
            "hash": "",
            "key": "zvns33",
            "pathname": "/r/nonexistentresource/preview",
            "search": "",
            "state": undefined,
          },
        ],
        "go": [Function],
        "goBack": [Function],
        "goForward": [Function],
        "index": 0,
        "length": 1,
        "listen": [Function],
        "location": Object {
          "hash": "",
          "key": "zvns33",
          "pathname": "/r/nonexistentresource/preview",
          "search": "",
          "state": undefined,
        },
        "push": [Function],
        "replace": [Function],
      }
    }
  >
    <HUD
      history={
        Object {
          "action": "POP",
          "block": [Function],
          "canGo": [Function],
          "createHref": [Function],
          "entries": Array [
            Object {
              "hash": "",
              "key": "fghx4t",
              "pathname": "/",
              "search": "",
              "state": undefined,
            },
          ],
          "go": [Function],
          "goBack": [Function],
          "goForward": [Function],
          "index": 0,
          "length": 1,
          "listen": [Function],
          "location": Object {
            "hash": "",
            "key": "fghx4t",
            "pathname": "/",
            "search": "",
            "state": undefined,
          },
          "push": [Function],
          "replace": [Function],
        }
      }
    >
      <div
        className="HUD"
      >
        <AnalyticsNudge>
          <section
            className="AnalyticsNudge"
          >
            <p>
              Welcome to Tilt! May we collect usage data to help us improve? (
              <a
                href="https://github.com/windmilleng/tilt#telemetry-and-privacy"
                target="_blank"
              >
                Read more
              </a>
              )
            </p>
            <span>
              <button
                className="AnalyticsNudge-button"
                onClick={[Function]}
              >
                Nope
              </button>
              <button
                className="AnalyticsNudge-button opt-in"
                onClick={[Function]}
              >
                I'm in
              </button>
            </span>
          </section>
        </AnalyticsNudge>
        <Switch>
          <Route
            computedMatch={
              Object {
                "isExact": true,
                "params": Object {
                  "name": "nonexistentresource",
                },
                "path": "/r/:name/preview",
                "url": "/r/nonexistentresource/preview",
              }
            }
            location={
              Object {
                "hash": "",
                "key": "zvns33",
                "pathname": "/r/nonexistentresource/preview",
                "search": "",
                "state": undefined,
              }
            }
            path="/r/:name/preview"
            render={[Function]}
          >
            <TopBar
              alertsUrl="/alerts"
              logUrl="/"
              numberOfAlerts={0}
              previewUrl="/preview"
              resourceView={1}
              sailEnabled={false}
              sailUrl=""
            >
              <div
                className="TopBar"
              >
                <TabNav
                  alertsUrl="/alerts"
                  logUrl="/"
                  numberOfAlerts={0}
                  previewUrl="/preview"
                  resourceView={1}
                >
                  <nav
                    className="TabNav"
                  >
                    <ul>
                      <li>
                        <Link
                          className="tabLink "
                          replace={false}
                          to="/"
                        >
                          <a
                            className="tabLink "
                            href="/"
                            onClick={[Function]}
                          >
                            Logs
                          </a>
                        </Link>
                      </li>
                      <li>
                        <Link
                          className="tabLink tabLink--is-selected"
                          replace={false}
                          to="/preview"
                        >
                          <a
                            className="tabLink tabLink--is-selected"
                            href="/preview"
                            onClick={[Function]}
                          >
                            Preview
                          </a>
                        </Link>
                      </li>
                      <li>
                        <Link
                          className="tabLink tabLink--errors "
                          replace={false}
                          to="/alerts"
                        >
                          <a
                            className="tabLink tabLink--errors "
                            href="/alerts"
                            onClick={[Function]}
                          >
                            Alerts
                          </a>
                        </Link>
                      </li>
                    </ul>
                  </nav>
                </TabNav>
                <span
                  className="TopBar-spacer"
                >
                   
                </span>
                <SailInfo
                  sailEnabled={false}
                  sailUrl=""
                >
                  <span
                    className="sail-url"
                  >
                     
                  </span>
                </SailInfo>
              </div>
            </TopBar>
          </Route>
        </Switch>
        <Switch>
          <Route
            computedMatch={
              Object {
                "isExact": true,
                "params": Object {
                  "name": "nonexistentresource",
                },
                "path": "/r/:name/preview",
                "url": "/r/nonexistentresource/preview",
              }
            }
            location={
              Object {
                "hash": "",
                "key": "zvns33",
                "pathname": "/r/nonexistentresource/preview",
                "search": "",
                "state": undefined,
              }
            }
            path="/r/:name/preview"
            render={[Function]}
          >
            <Sidebar
              isClosed={false}
              items={
                Array [
                  SidebarItem {
                    "alertResource": AlertResource {
                      "buildHistory": Array [
                        Object {
                          "Edits": Array [
                            "main.go",
                            "cli.go",
                          ],
                          "Error": "the build failed!",
                          "FinishTime": "2016-12-21T23:36:07.071Z",
                          "StartTime": "2016-12-21T23:36:07.071Z",
                        },
                      ],
                      "crashLog": "",
                      "name": "vigoda",
                      "resourceInfo": Object {
                        "podCreationTime": "2016-12-21T23:36:07.071Z",
                        "podRestarts": 0,
                        "podStatus": "Running",
                      },
                    },
                    "currentBuildStartTime": "2016-12-21T23:36:07.071Z",
                    "hasEndpoints": 0,
                    "hasPendingChanges": false,
                    "hasWarnings": false,
                    "lastBuild": Object {
                      "Edits": Array [
                        "main.go",
                        "cli.go",
                      ],
                      "Error": "the build failed!",
                      "FinishTime": "2016-12-21T23:36:07.071Z",
                      "StartTime": "2016-12-21T23:36:07.071Z",
                    },
                    "lastDeployTime": "2016-12-21T23:36:07.071Z",
                    "name": "vigoda",
                    "pendingBuildSince": "2016-12-21T23:36:07.071Z",
                    "status": "pending",
                    "triggerMode": 0,
                  },
                ]
              }
              pathBuilder={
                PathBuilder {
                  "host": "localhost",
                  "roomId": "",
                }
              }
              resourceView={1}
              selected="nonexistentresource"
              toggleSidebar={[Function]}
            >
              <section
                className="Sidebar"
              >
                <nav
                  className="Sidebar-resources"
                >
                  <ul
                    className="Sidebar-list"
                  >
                    <li>
                      <Link
                        className="resLink resLink--all"
                        replace={false}
                        to="/"
                      >
                        <a
                          className="resLink resLink--all"
                          href="/"
                          onClick={[Function]}
                        >
                          <span
                            className="resLink--all-name"
                          >
                            All
                          </span>
                          <span
                            className="resLink-alertBadge"
                          >
                            1
                          </span>
                          <span
                            className="resLink-timeAgo empty"
                          >
                            —
                          </span>
                          <span
                            className="resLink-isDirty"
                          />
                        </a>
                      </Link>
                    </li>
                    <li
                      key="vigoda"
                    >
                      <SidebarTriggerButton
                        isReady={false}
                        isSelected={false}
                        resourceName="vigoda"
                        triggerMode={0}
                      />
                      <Link
                        className="resLink resLink--building"
                        replace={false}
                        to="/r/vigoda/preview"
                      >
                        <a
                          className="resLink resLink--building"
                          href="/r/vigoda/preview"
                          onClick={[Function]}
                        >
                          <div
                            className="sidebarIcon"
                          >
                            <SidebarIcon
                              hasWarning={false}
                              isBuilding={true}
                              isDirty={false}
                              lastBuild={
                                Object {
                                  "Edits": Array [
                                    "main.go",
                                    "cli.go",
                                  ],
                                  "Error": "the build failed!",
                                  "FinishTime": "2016-12-21T23:36:07.071Z",
                                  "StartTime": "2016-12-21T23:36:07.071Z",
                                }
                              }
                              status="pending"
                              triggerMode={0}
                            >
                              <ForwardRef
                                className="dotAutoBuilding auto"
                                style={
                                  Object {
                                    "animation": "spin 1s linear infinite",
                                  }
                                }
                              >
                                <svg
                                  className="dotAutoBuilding auto"
                                  style={
                                    Object {
                                      "animation": "spin 1s linear infinite",
                                    }
                                  }
                                >
                                  indicator-auto-building.svg
                                </svg>
                              </ForwardRef>
                            </SidebarIcon>
                          </div>
                          <p
                            className="resLink-name"
                            title="vigoda"
                          >
                            vigoda
                          </p>
                          <span
                            className="resLink-alertBadge"
                          >
                            1
                          </span>
                          <span
                            className="resLink-timeAgo "
                          >
                            <TimeAgo
                              component="time"
                              date="2016-12-21T23:36:07.071Z"
                              formatter={[Function]}
                              live={true}
                              maxPeriod={Infinity}
                              minPeriod={0}
                              now={[Function]}
                            >
                              <time
                                dateTime="2016-12-21T23:36:07.071Z"
                                title="2016-12-21T23:36:07.071Z"
                              >
                                &lt;5s
                              </time>
                            </TimeAgo>
                          </span>
                          <span
                            className="resLink-isDirty"
                          />
                        </a>
                      </Link>
                    </li>
                  </ul>
                </nav>
                <div
                  className="Sidebar-spacer"
                >
                   
                </div>
                <button
                  className="Sidebar-toggle"
                  onClick={[Function]}
                >
                  <ForwardRef>
                    <svg>
                      chevron.svg
                    </svg>
                  </ForwardRef>
                   Collapse
                </button>
              </section>
            </Sidebar>
          </Route>
        </Switch>
        <Statusbar
          alertsUrl="/alerts"
          items={
            Array [
              StatusItem {
                "buildHistory": Array [
                  Object {
                    "Edits": Array [
                      "main.go",
                      "cli.go",
                    ],
                    "Error": "the build failed!",
                    "FinishTime": "2016-12-21T23:36:07.071Z",
                    "StartTime": "2016-12-21T23:36:07.071Z",
                  },
                ],
                "currentBuild": Object {
                  "Edits": Array [
                    "main.go",
                  ],
                  "StartTime": "2016-12-21T23:36:07.071Z",
                },
                "hasError": false,
                "lastBuild": Object {
                  "Edits": Array [
                    "main.go",
                    "cli.go",
                  ],
                  "Error": "the build failed!",
                  "FinishTime": "2016-12-21T23:36:07.071Z",
                  "StartTime": "2016-12-21T23:36:07.071Z",
                },
                "name": "vigoda",
                "pendingBuildEdits": Array [
                  "main.go",
                  "cli.go",
                  "vigoda.go",
                ],
                "pendingBuildSince": "2016-12-21T23:36:07.071Z",
                "podStatus": "Running",
                "up": false,
                "warningCount": 0,
              },
            ]
          }
        >
          <div
            className="Statusbar"
          >
            <section
              className="Statusbar-panel Statusbar-errWarnPanel"
            >
              <div
                className="Statusbar-errWarnPanel-child"
              >
                <ForwardRef
                  className="Statusbar-errWarnPanel-icon "
                >
                  <svg
                    className="Statusbar-errWarnPanel-icon "
                  >
                    error.svg
                  </svg>
                </ForwardRef>
                <p>
                  <span
                    className="Statusbar-errWarnPanel-count Statusbar-errWarnPanel-count--error"
                  >
                    0
                  </span>
                   
                  <Link
                    replace={false}
                    to="/alerts"
                  >
                    <a
                      href="/alerts"
                      onClick={[Function]}
                    >
                      error
                      s
                    </a>
                  </Link>
                </p>
              </div>
              <div
                className="Statusbar-errWarnPanel-child"
              >
                <ForwardRef
                  className="Statusbar-errWarnPanel-icon "
                >
                  <svg
                    className="Statusbar-errWarnPanel-icon "
                  >
                    warning.svg
                  </svg>
                </ForwardRef>
                <p>
                  <span
                    className="Statusbar-errWarnPanel-count"
                  >
                    0
                  </span>
                   
                  warning
                  s
                </p>
              </div>
            </section>
            <section
              className="Statusbar-panel Statusbar-statusMsgPanel"
            >
              <p
                className="Statusbar-statusMsgPanel-child"
              >
                Updating vigoda…
              </p>
              <p
                className="Statusbar-statusMsgPanel-child Statusbar-statusMsgPanel-child--lastEdit"
              >
                <span
                  className="Statusbar-statusMsgPanel-label"
                >
                  Last Edit:
                </span>
                <span>
                  vigoda ‣ main.go[+2 more]
                </span>
              </p>
            </section>
            <section
              className="Statusbar-panel Statusbar-progressPanel"
            >
              <p>
                <strong>
                  0
                </strong>
                /
                1
                 running
              </p>
            </section>
            <section
              className="Statusbar-tiltPanel"
            >
              <ForwardRef
                className="Statusbar-logo"
              >
                <svg
                  className="Statusbar-logo"
                >
                  logo.svg
                </svg>
              </ForwardRef>
            </section>
          </div>
        </Statusbar>
        <Switch>
          <Route
            computedMatch={
              Object {
                "isExact": true,
                "params": Object {
                  "name": "nonexistentresource",
                },
                "path": "/r/:name/preview",
                "url": "/r/nonexistentresource/preview",
              }
            }
            exact={true}
            location={
              Object {
                "hash": "",
                "key": "zvns33",
                "pathname": "/r/nonexistentresource/preview",
                "search": "",
                "state": undefined,
              }
            }
            path="/r/:name/preview"
            render={[Function]}
          >
            <Route
              component={[Function]}
            >
              <NotFound
                history={
                  Object {
                    "action": "POP",
                    "block": [Function],
                    "canGo": [Function],
                    "createHref": [Function],
                    "entries": Array [
                      Object {
                        "hash": "",
                        "key": "zvns33",
                        "pathname": "/r/nonexistentresource/preview",
                        "search": "",
                        "state": undefined,
                      },
                    ],
                    "go": [Function],
                    "goBack": [Function],
                    "goForward": [Function],
                    "index": 0,
                    "length": 1,
                    "listen": [Function],
                    "location": Object {
                      "hash": "",
                      "key": "zvns33",
                      "pathname": "/r/nonexistentresource/preview",
                      "search": "",
                      "state": undefined,
                    },
                    "push": [Function],
                    "replace": [Function],
                  }
                }
                location={
                  Object {
                    "hash": "",
                    "key": "zvns33",
                    "pathname": "/r/nonexistentresource/preview",
                    "search": "",
                    "state": undefined,
                  }
                }
                match={
                  Object {
                    "isExact": true,
                    "params": Object {
                      "name": "nonexistentresource",
                    },
                    "path": "/r/:name/preview",
                    "url": "/r/nonexistentresource/preview",
                  }
                }
              >
                <LoadingScreen
                  message={
                    <div>
                      No resource found at 
                      <code>
                        /r/nonexistentresource/preview
                      </code>
                    </div>
                  }
                >
                  <section
                    className="LoadingScreen"
                  >
                    <div>
                      No resource found at 
                      <code>
                        /r/nonexistentresource/preview
                      </code>
                    </div>
                  </section>
                </LoadingScreen>
              </NotFound>
            </Route>
          </Route>
        </Switch>
      </div>
    </HUD>
  </Router>
</MemoryRouter>
`;
